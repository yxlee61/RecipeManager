@model RecipeManager.Models.Size

@{
  ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
  @Html.AntiForgeryToken()

  <div class="form-horizontal">
    <h4>Size</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.SizeId)

    <div class="form-group">
      @Html.LabelFor(model => model.RecipeId, "RecipeId", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.DropDownList("RecipeId", null, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.RecipeId, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.SizeName, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EnumDropDownListFor(model => model.SizeName, null, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.SizeName, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Template, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EnumDropDownListFor(model => model.Template, null, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Template, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Calories, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Calories, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Calories, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.CaloriesFromFat, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.CaloriesFromFat, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CaloriesFromFat, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.TotalFat, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.TotalFat, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.TotalFat, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.SaturatedFat, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.SaturatedFat, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SaturatedFat, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.TransFat, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.TransFat, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.TransFat, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Cholesterol, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Cholesterol, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Cholesterol, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Sodium, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Sodium, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Sodium, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.TotalCarbs, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.TotalCarbs, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.TotalCarbs, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Fiber, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Fiber, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Fiber, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Sugars, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Sugars, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Sugars, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Protein, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Protein, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Protein, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.VitaminA, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.VitaminA, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.VitaminA, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.VitaminC, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.VitaminC, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.VitaminC, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Calcium, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Calcium, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Calcium, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Iron, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Iron, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Iron, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      <div class="col-md-offset-2 col-md-10">
        <input type="submit" name="saveBtn" value="Save" class="btn btn-default" />
        @*<input type="submit" name="deleteBtn" value="Delete" class="btn btn-default" />*@        
        @Html.ActionLink("Delete", "Delete", new { id = Model.SizeId })
      </div>
    </div>
  </div>
}

<div>
  @Html.ActionLink("Back to List", "Index", "Recipe", new { id = Model.RecipeId }, null)
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
